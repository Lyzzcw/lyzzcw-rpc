<?xml version="1.0" encoding="UTF-8" ?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- configuration标签 scan属性代表logback框架会定时检测改配置文件是否有发生改动，如果有则更新为最新配置-->>
	<!-- 在Eclipse中运行，请到Eclipse的安装目录中找log文件，Tomcat下，请到Tomcat目录下找 -->
	<property name="LOG_PATH" value="./logs/rpc" />
	<property name="APP_NAME" value="LZY_" />

	<property name="max.file.size" value="500MB"/>
	<!-- 保留的归档文件的最大天数 -->
	<property name="max.history" value="20"/>
	<!-- 控制所有归档日志文件的总大小 -->
	<property name="total.size.cap" value="10GB"/>
	<!-- 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder charset="UTF-8">
			<pattern>[TRACEID:%X{traceId}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
	</appender>

	<!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
	<appender name="FILEERROR"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${LOG_PATH}/${APP_NAME}Error.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定， 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_PATH}/backup/${APP_NAME}Error.%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxFileSize>${max.file.size}</maxFileSize>
			<maxHistory>${max.history}</maxHistory>
			<totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志文件只记录error级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="FILEINFO"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${LOG_PATH}/${APP_NAME}Info.log</File>

		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/backup/${APP_NAME}Info.%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxFileSize>${max.file.size}</maxFileSize>
			<maxHistory>${max.history}</maxHistory>
			<totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
		<append>true</append>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志文件只记录INFO级别，不记录大于INFO级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="FILEWARN"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${LOG_PATH}/${APP_NAME}Warn.log</File>

		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/backup/${APP_NAME}Warn.%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxFileSize>${max.file.size}</maxFileSize>
			<maxHistory>${max.history}</maxHistory>
			<totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
		<append>true</append>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志文件只记录WARN级别，不记录大于WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="FILEDEBUG"
			  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${LOG_PATH}/${APP_NAME}Debug.log</File>

		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/backup/${APP_NAME}Debug.%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxFileSize>${max.file.size}</maxFileSize>
			<maxHistory>${max.history}</maxHistory>
			<totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
		<append>true</append>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志文件只记录DEBUG级别，不记录大于DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="info-async-appender" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 日志丢弃的阈值，即达到队列长度的多少会丢弃日志，默认是80%， 0代表不丢弃-->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="FILEINFO"/>
	</appender>
	<!-- <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="ERROR"
		/> <logger name="org.springframework" level="ERROR" /> -->
	<root level="DEBUG">
		<!-- 生产环境将请stdout去掉 -->
		<appender-ref ref="FILEDEBUG" />
		<!--<appender-ref ref="FILEINFO" />-->
		<appender-ref ref="info-async-appender" />
		<appender-ref ref="FILEWARN" />
		<appender-ref ref="FILEERROR" />
		<!-- 生产环境将请stdout去掉 		-->
		<appender-ref ref="STDOUT" />

	</root>

	<!-- 下面配置一些第三方包的日志过滤级别，用于避免刷屏 -->
	<logger name="org.springframework" level="info" />
	<logger name="org.apache" level="info" />

	<!--myibatis log configure -->
	<logger name="com.apache.ibatis" level="TRACE" />
	<logger name="java.sql.Connection" level="DEBUG" />
	<logger name="java.sql.Statement" level="DEBUG" />
	<logger name="java.sql.PreparedStatement" level="DEBUG" />

	<logger name="com.demo.consumer.openFeign" level="DEBUG"/>

	<logger name="com.alibaba.nacos.shaded.io.grpc.netty" level="INFO" />
	<logger name="com.alibaba.nacos.client.naming" level="INFO" />
</configuration>